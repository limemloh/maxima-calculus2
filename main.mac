printHeader(s) := print("-----", s, "-----");
printLine() := print("-----------------------------");

vecLen(v) := (
  sqrt(v . v)
  );


unitVecRad(a):= (
  x: cos(a),
  y: sin(a),
  fac: factor(x,y),
  printHeader("Beregner enhedsvektor fra radianer"),
  print("Faktoriseret: ", fac,[x/fac,y/fac],""),
  print("Foruden:", [x,y])
  );

normVec(v) := (
  v / vecLen(v)
  );

gradient(f, p, vec) := (
  printHeader("Viser information for"),
  print("f(x,y) = ", f),
  fx: diff(f, x),
  fxx: diff(fx, x),
  fxy: diff(fx, y),
  fy: diff(f, y),
  fyx: diff(fy, x),
  fyy: diff(fy, y),
  grad: [fx, fy],
  gradP: [ev(fx, x = p[1], y = p[2]), ev(fy, x = p[1], y = p[2])],
  maxDir: gradP / vecLen(gradP),
  printHeader("Afledte funktioner"),
  print("f_x(x,y) =", fx),
  print("f_xx(x,y) =", fxx),
  print("f_xy(x,y) =", fxy),
  print("f_y(x,y) =", fy),
  print("f_yy(x,y) =", fyy),
  print("f_yx(x,y) =", fyx),
  printHeader("Gradienten og retningsafledte"),
  print("Gradienten:", grad),
  print("Gradienten i punktet", p, "er", gradP),
  print("Retningsafledede i punktet", p, ":", vec. gradP),
  print("Den vektor, der giver den stoorste retningsafledede:", maxDir),
  print("Den stoorste regningsafledede i", p, ":", maxDir . gradP)
  );

gradientAngle(f, p, theta) := (
  vec: [cos(theta), sin(theta)],
  print("retningsvektoren for vinklen:", vec),
  gradient(f, p, vec)
  );

projection(v, u) := (
  (u . v) / (u . u)
  );

twoVectors(v, u) := (
  dotProduct: v . u,
  lenV: vecLen(v),
  lenU: vecLen(u),
  dist: vecLen(v - u),
  projLen: vecLen(u - projection(u, v) * v),
  print("|v| = ", lenV),
  print("|u| = ", lenU),
  print("afstand mellem v og u: ", dist),
  print("skalar produkt: v . u = ", dotProduct),
  print("v projekteret paa u: ", projection(v, u), " * u"),
  print("u projekteret paa v: ", projection(u, v), " * v"),
  print("korteste afstand fra u til v: ", projLen)
  );

threeVectors(u1, u2, x) := (
  lenU1: vecLen(u1),
  lenU2: vecLen(u2),
  nU1: normVec(u1),
  nU2: normVec(u2),
  lenX: vecLen(x),
  printHeader("Laengder"),
  print("|u1| = ", lenU1),
  print("|u2| = ", lenU2),
  print("|x| = ", lenX),
  print("skalar produkt: x . u1 = ", x . u1),
  print("skalar produkt: x . u2 = ", x . u2),
  print("afstand fra x til u1", vecLen(x - u1)),
  print("afstand fra x til u2", vecLen(x - u2)),
  print("x projekteret paa u1: ", projection(x, u1), " * u1"),
  print("x projekteret paa u2: ", projection(x, u2), " * u2"),
  if u1 . u2 = 0
    then print("x projekteret paa rummet udspaendt af u1 og u2:", (x . nU1) * nU1 + (x . nU2) * nU2)
    else print("u1 og u2 er ikke ortogonale")
  );

exprD(fxx, fyy, fxy) := (
  fxx * fyy - fxy^2
  );

secDerTest(d, fxxab) := (
  if d > 0 and fxxab > 0 then "lokalt minimum"
  else if d > 0 and fxxab < 0 then "lokalt maksimum"
  else if d < 0 then "saddelpunkt"
  else "n/a"
  );

criticalPoints(f) := (
  printHeader("Viser information for"),
  print("f(x,y) = ", f),
  fx: diff(f, x),
  fxx: diff(fx, x),
  fxy: diff(fx, y),
  fy: diff(f, y),
  fyx: diff(fy, x),
  fyy: diff(fy, y),
  critPs: solve([fx, fy], [x, y]),
  d: exprD(fxx, fyy, fxy),
  printHeader("Afledte funktioner"),
  print("f_x(x,y) =", fx),
  print("f_xx(x,y) =", fxx),
  print("f_xy(x,y) =", fxy),
  print("f_y(x,y) =", fy),
  print("f_yy(x,y) =", fyy),
  print("f_yx(x,y) =", fyx),
  print("Udtryk for D:", d),
  printHeader("Kritiske punkter"),
  print("antal kritiske punkter:", length(critPs)),
  for critP in critPs do (
    a: critP[1],
    b: critP[2],
    curD: ev(d, a, b),
    print("Kritisk punkt:", critP),
    print("hvis vaerdi er:", ev(f, a, b)),
    print("D:", curD),
    print("punktet er et", secDerTest(curD, ev(fxx, critP[1], critP[2])))
    )
  );

maclaurin(f, y) := (
  printHeader("Viser information for"),
  print("f(x) = ", f),
  printHeader("De afledte er"),
  for i: 0 thru 10 do (
    ff: diff(f, x, i),
    print("f^(", i, ") =", ff),
    print("f^(", i, ")(0) =", ev(ff, x=0))
    ),
  printHeader("Maclaurin raekken for f(x) er"),
  print(taylor(f, x, 0, 18)),
  printHeader("Maclaurin raekken for f'(x) er"),
  print(taylor(diff(f, x), x, 0, 18)),
  intF: integrate(f, x),
  constant: y - ev(intF, x=0),
  printHeader("Maclaurin raekken for F(x) er"),
  print(taylor(intF + constant, x, 0, 18))
  );

calcMatrix(a) := (
  printHeader("Viser information for"),
  print(a),
  printHeader("Det karakteristisk polynomie"),
  ch: charpoly(a, l),
  /* print char poly in several forms */
  print(expand(ch), "=", factor(ch), "=", ch),
  printHeader("Egenvaerdier og egenvektorer"),
  vecs: eigenvectors(a),
  eigvals: vecs[1][1],
  print("antal egenvaerdier:", length(eigvals)),
  for i: 1 thru length(eigvals) do (
    print("Egenvaerdi"),
    print(vecs[1][1][i]),
    print("Egenvektorer"),
    print(vecs[2][i]),
    print("Egenrummet"),
    print(nullspace(a-vecs[1][1][i]*identfor(a))),
    printLine())
  );

areaVol(lx, gx, ly, gy, lz, gz) := (
  areaEq: 'integrate(gy - ly, x, lx, gx),
  area: integrate(gy - ly, x, lx, gx),
  volumeEq: 'integrate('integrate(gz - lz, y, ly, gy), x, lx, gx),
  volume: integrate(integrate(gz - lz, y, ly, gy), x, lx, gx),
  printHeader("Areal"),
  print("D1 = { (x,y) |", lx, "<= x <=", gx, ",", ly, "<= y <=", gy, "}"),
  print(A(D1) = areaEq, "=", area),
  plot2d([ly, gy], [x, lx, gx]),
  printHeader("Volume"),
  print("D2 = { (x,y,z) |", lx, "<= x <=", gx, ",", ly, "<= y <=", gy, ",", lz, "<= z <=", gz, "}"),
  print(V(D2) = volumeEq, "=", volume)
  );

