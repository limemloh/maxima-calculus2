printHeader(s) := print("-----", s, "-----");

vecLen(v):=(
  sqrt(v . v)
  );

projection(v, u) := (
  (u . v) / (u . u)
  );

twoVectors(v, u) := (
  dotProduct: v . u,
  lenV: vecLen(v),
  lenU: vecLen(u),
  dist: vecLen(v - u),
  projLen: vecLen(u - projection(u, v) * v),
  print("|v| = ", lenV),
  print("|u| = ", lenU),
  print("afstand mellem v og u: ", dist),
  print("skalar produkt: v . u = ", dotProduct),
  print("v projekteret på u: ", projection(v, u), " * u"),
  print("u projekteret på v: ", projection(u, v), " * v"),
  print("korteste afstand fra u til v: ", projLen)
  );

exprD(fxx, fyy, fxy) := (
  fxx * fyy - fxy^2
  );

secDerTest(d, fxxab) := (
  if d > 0 and fxxab > 0 then "lokalt minimum"
  else if d > 0 and fxxab < 0 then "lokalt maksimum"
  else if d < 0 then "saddelpunkt"
  else "n/a"
  );

criticalPoints(f) := (
  printHeader("Viser information for"),
  print("f(x,y) = ", f),
  fx: diff(f, x),
  fxx: diff(fx, x),
  fxy: diff(fx, y),
  fy: diff(f, y),
  fyx: diff(fy, x),
  fyy: diff(fy, y),
  critPs: solve([fx, fy], [x, y]),
  d: exprD(fxx, fyy, fxy),
  printHeader("Afledte funktioner"),
  print("f_x(x,y) =", fx),
  print("f_xx(x,y) =", fxx),
  print("f_xy(x,y) =", fxy),
  print("f_y(x,y) =", fy),  print("f_yy(x,y) =", fyy),
  print("f_yx(x,y) =", fyx),
  print("Udtryk for D:", d),
  printHeader("Kritiske punkter"),
  print("antal kritiske punkter:", length(critPs)),
  for critP in critPs do (
    a: critP[1],
    b: critP[2],
    curD: ev(d, a, b),
    print("Kritisk punkt:", critP),
    print(f),
    print("hvis vaerdi er:", ev(f, a, b)),
    print("D:", curD),
    print("punktet er et", secDerTest(curD, ev(fxx, critP[1], critP[2])))
    )
  );

maclaurin(f, y) := (
  printHeader("Viser information for"),
  print("f(x) = ", f),
  printHeader("De afledte er"),
  for i: 0 thru 10 do (
    ff: diff(f, x, i),
    print("f^(", i, ") =", ff),
    print("f^(", i, ")(0) =", ev(ff, x=0))
    ),
  printHeader("Maclaurin raekken for f(x) er"),
  print(taylor(f, x, 0, 18)),
  printHeader("Maclaurin raekken for f'(x) er"),
  print(taylor(diff(f, x), x, 0, 18)),
  intF: integrate(f, x),
  constant: y - ev(intF, x=0),
  printHeader("Maclaurin raekken for F(x) er"),
  print(taylor(intF + constant, x, 0, 18))
  );